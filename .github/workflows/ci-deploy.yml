name: CI & Auto Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18.x
  # Test DB credentials (ephemeral Postgres service started in workflow)
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_NAME: parkeasy_test
  DB_HOST: 127.0.0.1
  DB_PORT: 5432
  JWT_SECRET: test_jwt_secret_change_in_prod
  JWT_EXPIRES_IN: 1d

jobs:
  backend-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: parkeasy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Backend Dependencies
        run: npm ci

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            nc -z 127.0.0.1 5432 && echo "Postgres up" && break
            echo "Waiting for Postgres..."; sleep 2;
          done

      - name: Run Migrations
        env:
          DATABASE_URL: postgresql://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}
        run: npm run migrate

      - name: Run Tests
        env:
          DATABASE_URL: postgresql://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_NAME }}
          NODE_ENV: test
        run: npm test -- --ci --reporters=default --reporters=jest-junit

      - name: Archive Test Results (Optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-results
          path: junit.xml
          if-no-files-found: ignore

  build-frontend:
    name: Frontend Build (Optional Monorepo)
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Detect Frontend Folder
        id: detect
        run: |
          if [ -d "frontend" ]; then echo "found=true" >> $GITHUB_OUTPUT; echo "dir=frontend" >> $GITHUB_OUTPUT; \
          elif [ -d "parkeasy-frontend-clean" ]; then echo "found=true" >> $GITHUB_OUTPUT; echo "dir=parkeasy-frontend-clean" >> $GITHUB_OUTPUT; \
          else echo "found=false" >> $GITHUB_OUTPUT; fi

      - name: Install & Build Frontend
        if: steps.detect.outputs.found == 'true'
        working-directory: ${{ steps.detect.outputs.dir }}
        env:
          CI: "true"
          REACT_APP_API_URL: ${{ secrets.FRONTEND_API_URL || 'http://localhost:3000/api' }}
        run: |
          npm ci
          npm run build

      - name: Skip Notice
        if: steps.detect.outputs.found == 'false'
        run: echo "No 'frontend' directory present; skipping frontend build."

  deploy:
    name: Trigger Deploy Hooks (Render & Vercel)
    runs-on: ubuntu-latest
    needs: [backend-test, build-frontend]
    if: github.ref == 'refs/heads/main' && needs.backend-test.result == 'success'
    steps:
      - name: Trigger Render Deploy (Backend)
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then curl -X POST "$RENDER_DEPLOY_HOOK" -f -s -o /dev/null && echo "Render deploy triggered."; else echo "Render hook not set"; fi

      - name: Trigger Vercel Deploy (Frontend)
        env:
          VERCEL_DEPLOY_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
        run: |
          if [ -n "$VERCEL_DEPLOY_HOOK" ]; then curl -X POST "$VERCEL_DEPLOY_HOOK" -f -s -o /dev/null && echo "Vercel deploy triggered."; else echo "Vercel hook not set"; fi


# HOW TO ENABLE AUTO DEPLOY:
# 1. In GitHub repo settings -> Secrets and variables -> Actions, add:
#    - RENDER_DEPLOY_HOOK : (Render Service -> Deploy Hook URL)
#    - VERCEL_DEPLOY_HOOK : (Vercel Project -> Settings -> Deploy Hooks)
#    - FRONTEND_API_URL   : e.g. https://your-backend.onrender.com/api
# 2. (Optional) Move or copy frontend code into a 'frontend' directory at repo root.
# 3. Push to main; pipeline runs tests, optionally builds frontend, then triggers deploy hooks if set.
# 4. For stricter gating, add a required Pull Request workflow and protect the main branch.